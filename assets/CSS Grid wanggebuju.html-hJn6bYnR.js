import{_ as e,o as a,c as i,e as d}from"./app-iGMGIGKa.js";const t="/Blog/assets/img-xtl7odE5.png",r="/Blog/assets/img_1-HEqGx1qi.png",n="/Blog/assets/img_2-AjYmj8cg.png",s="/Blog/assets/image-suG53xrZ.png",l="/Blog/assets/image-1-SlgH7fJ9.png",o="/Blog/assets/img_3-TS1xuiRo.png",c={},u=d('<h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述" aria-hidden="true">#</a> 一、概述</h2><p>网格布局（Grid）是目前最强大的 CSS 布局方案。</p><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前,做下面这样一个布局怎样做？定位和 flex 布局?现在我们还可以使用Grid。 你会画网格,你就会Grid布局。 <img src="'+t+`" alt="img.png"> 实际上,Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p><p>Flex 布局是轴线布局，只能指定&quot;项目&quot;针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成&quot;行&quot;和&quot;列&quot;，产生单元格，然后指定&quot;项目所在&quot;的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p><h2 id="二、基本概念" tabindex="-1"><a class="header-anchor" href="#二、基本概念" aria-hidden="true">#</a> 二、基本概念</h2><p>学习 Grid 布局之前，需要了解一些基本概念。</p><h3 id="_2-1-容器和项目" tabindex="-1"><a class="header-anchor" href="#_2-1-容器和项目" aria-hidden="true">#</a> 2.1 容器和项目</h3><p>采用网格布局的区域，称为&quot;容器&quot;（container）。容器内部采用网格定位的子元素，称为&quot;项目&quot;（item）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div&gt;
  &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;
  &lt;div&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;
  &lt;div&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意:<strong>上面代码中外层的 div 元素就是容器，内层的 div 元素就是项目。</strong>_<strong>项目只能是容器的顶层子元素，不包含项目的子元素。</strong>_</strong></p><h3 id="_2-2-行和列" tabindex="-1"><a class="header-anchor" href="#_2-2-行和列" aria-hidden="true">#</a> 2.2 行和列</h3><p>容器里面的水平区域称为 &quot;行&quot;（row），垂直区域称为 &quot;列&quot;（column）。</p><p><img src="`+r+'" alt="img_1.png"></p><p>上图中，水平的深色区域就是 &quot;行&quot;，垂直的深色区域就是 &quot;列&quot;。</p><h3 id="_2-3-单元格" tabindex="-1"><a class="header-anchor" href="#_2-3-单元格" aria-hidden="true">#</a> 2.3 单元格</h3><p>行和列的交叉区域，称为 &quot;单元格&quot;（cell）。</p><p>正常情况下，n 行和 m 列会产生 n x m 个单元格。比如，3 行 3 列会产生 9 个单元格。</p><h3 id="_2-4-网格线" tabindex="-1"><a class="header-anchor" href="#_2-4-网格线" aria-hidden="true">#</a> 2.4 网格线</h3><p>划分网格的线，称为 &quot;网格线&quot;（grid line）。水平网格线划分出行，垂直网格线划分出列。</p><p>正常情况下，n 行有 n + 1 根水平网格线，m 列有 m + 1 根垂直网格线，比如三行就有四根水平网格线。 <img src="'+n+`" alt="img_2.png"> 上图是一个 4 x 4 的网格，共有 5 根水平网格线和 5 根垂直网格线。</p><h2 id="三、容器属性" tabindex="-1"><a class="header-anchor" href="#三、容器属性" aria-hidden="true">#</a> 三、容器属性</h2><p>Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。</p><h3 id="_3-1-display-属性" tabindex="-1"><a class="header-anchor" href="#_3-1-display-属性" aria-hidden="true">#</a> 3.1 display 属性</h3><p>display: grid 指定一个容器采用网格布局。</p><blockquote><p>div { display: grid; }</p></blockquote><p>除此之外，还有 <code>display: inline-grid</code>。整个容器变为行内元素，不独占一行了。</p><h3 id="_3-2-gap" tabindex="-1"><a class="header-anchor" href="#_3-2-gap" aria-hidden="true">#</a> 3.2 gap</h3><ul><li>如果我们想让各个数字有间隙可以使用 gap 属性</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 行列间距
grid-column-gap: 10px;
grid-row-gap: 10px;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以缩写为 <code>grid-gap: 10px;</code><img src="`+s+`" alt="Alt text"></p><h3 id="_3-3-grid-auto-flow" tabindex="-1"><a class="header-anchor" href="#_3-3-grid-auto-flow" aria-hidden="true">#</a> 3.3 grid-auto-flow</h3><ul><li>如果想让按列排而不是上面按行排,此时可以使用</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> // 默认是按先行后列的，现在也可以改为先列后行 默认值是 row
 grid-auto-flow: column;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt="Alt text"></p><h2 id="四、项目属性" tabindex="-1"><a class="header-anchor" href="#四、项目属性" aria-hidden="true">#</a> 四、项目属性</h2><h3 id="_4-1-常用的" tabindex="-1"><a class="header-anchor" href="#_4-1-常用的" aria-hidden="true">#</a> 4.1 常用的</h3><div class="language-bazaar line-numbers-mode" data-ext="bazaar"><pre class="language-bazaar"><code>grid-column-start属性：左边框所在的垂直网格线
grid-column-end属性：右边框所在的垂直网格线
grid-row-start属性：上边框所在的水平网格线
grid-row-end属性：下边框所在的水平网格线
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 设置单元格的内容样式
grid-column-start: 2;
grid-column-end: 4;
grid-row-start: 1;
grid-row-end: 3;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt="img_3.png"> 这里9号为啥会成这么小了,是因为被挤下去了</p><h3 id="_4-2-repeat" tabindex="-1"><a class="header-anchor" href="#_4-2-repeat" aria-hidden="true">#</a> 4.2 repeat</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//grid-template-columns: repeat(3, 1fr);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,41),g=[u];function p(h,m){return a(),i("div",null,g)}const _=e(c,[["render",p],["__file","CSS Grid wanggebuju.html.vue"]]);export{_ as default};
